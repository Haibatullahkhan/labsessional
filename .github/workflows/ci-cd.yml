name: CI/CD Pipeline

# Trigger the workflow on push to the main branch and pull requests
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  # Job for testing
  test:
    runs-on: ubuntu-latest

    services:
      # Docker service for running MongoDB (optional, if you need to test MongoDB)
      mongodb:
        image: mongo:latest
        ports:
          - 27017:27017
        options: --health-cmd 'exit 0' --health-interval 10s --health-timeout 5s --health-retries 3

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '14'  # Use the version of Node.js that your project needs

      - name: Install dependencies
        run: |
          npm install
          
      - name: Run tests
        run: |
          npm run test  # Ensure you have test scripts in your package.json

  # Job for building Docker images
  build:
    runs-on: ubuntu-latest

    needs: test  # This ensures build only happens after tests pass

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-build-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-build-

      - name: Build Docker image
        run: |
          docker build -t myproject:${{ github.sha }} .
          docker tag myproject:${{ github.sha }} ghcr.io/Haibatullahkhan/labsessional/myproject:${{ github.sha }}

      - name: Push Docker image
        run: |
          docker push ghcr.io/Haibatullahkhan/labsessional/myproject:${{ github.sha }}

  # Job for deploying the project (optional, this assumes you have a cloud service or server setup)
  deploy:
    runs-on: ubuntu-latest

    needs: build  # This ensures deployment only happens after build is successful

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Deploy to production (Example using SSH)
        run: |
          ssh user@server_address "cd /path/to/your/project && git pull && docker-compose up -d"
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
